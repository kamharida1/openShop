enum OrderStatus {
  NEW
  READY_FOR_PICKUP
  PICKED_UP
  COMPLETED
  ACCEPTED
}

type Order @model @auth(rules: [{allow: public}]) {
  id: ID!
  OrderProducts: [OrderProduct] @hasMany(indexName: "byOrder", fields: ["id"])
  total: Float!
  status: OrderStatus
  userID: ID! @index(name: "byUser")
}

type OrderProduct @model @auth(rules: [{allow: public}]) {
  id: ID!
  quantity: Int
  Product: Product @hasOne
  orderID: ID! @index(name: "byOrder")
}

type Basket @model @auth(rules: [{allow: public}]) {
  id: ID!
  BasketProducts: [BasketProduct] @hasMany(indexName: "byBasket", fields: ["id"])
  userID: ID! @index(name: "byUser")
}

type BasketProduct @model @auth(rules: [{allow: public}]) {
  id: ID!
  quantity: Int!
  Product: Product @hasOne
  basketID: ID! @index(name: "byBasket")
}

type User @model @auth(rules: [{allow: public}]) {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  sub: ID!
  Addresses: [Address] @hasMany(indexName: "byUser", fields: ["id"])
  phone: AWSPhone
  Baskets: [Basket] @hasMany(indexName: "byUser", fields: ["id"])
  Orders: [Order] @hasMany(indexName: "byUser", fields: ["id"])
}

type SubCategory @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  Products: [Product] @hasMany(indexName: "bySubCategory", fields: ["id"])
  OptionTypes: [OptionType] @hasMany(indexName: "bySubCategory", fields: ["id"])
  categoryID: ID! @index(name: "byCategory")
}

type ProductType @model @auth(rules: [{allow: public}]) {
  id: ID!
  Products: [Product] @hasMany(indexName: "byProductType", fields: ["id"])
  Categories: [Category] @hasMany(indexName: "byProductType", fields: ["id"])
  name: String!
}

type Address @model @auth(rules: [{allow: public}]) {
  id: ID!
  address: String!
  subAddress: String
  city: String
  country: String!
  fullAddress: String!
  lat: Float
  lng: Float
  location: String
  postCode: String
  state: String
  isSelected: Boolean
  userID: ID! @index(name: "byUser")
}

type Brand @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  Products: [Product] @hasMany(indexName: "byBrand", fields: ["id"])
  logo: String
}

type OptionValue @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  optiontypeID: ID! @index(name: "byOptionType")
  OptionType: OptionType @belongsTo(fields: ["optiontypeID"])
}

enum PurposeEnum {
  VARIANT
  FEATURE
  PRODUCT_DETAILS_TEXT
  PRODUCT_DETAILS_SELECT
}

type OptionType @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  value: String
  placeholder: String
  category: PurposeEnum
  OptionValues: [OptionValue] @hasMany(indexName: "byOptionType", fields: ["id"])
  subcategoryID: ID! @index(name: "bySubCategory")
}

type Category @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  description: String
  image: String
  Products: [Product] @hasMany(indexName: "byCategory", fields: ["id"])
  producttypeID: ID! @index(name: "byProductType")
  SubCategories: [SubCategory] @hasMany(indexName: "byCategory", fields: ["id"])
}

type Product @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  count: Int!
  about: String!
  images: [String!]
  rating: Float
  colors: [String]
  details: AWSJSON
  price: Float!
  mockPrice: Float
  wholesalePrice: Float
  wholesalePromoPrice: Float
  features: [String]
  published: Boolean
  model: String
  isFeatured: Boolean
  isPromoted: Boolean
  promoPrice: Float
  categoryID: ID! @index(name: "byCategory")
  Category: Category! @belongsTo(fields: ["categoryID"])
  brandID: ID! @index(name: "byBrand")
  Brand: Brand @belongsTo(fields: ["brandID"])
  producttypeID: ID! @index(name: "byProductType")
  subcategoryID: ID! @index(name: "bySubCategory")
}
